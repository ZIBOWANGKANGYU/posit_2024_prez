---
title: "Use GitHub Copilot for R Shiny Development"
format:
  revealjs: 
    code-line-numbers: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    footer: Mark Wang for posit::conf(2024)
---

```{r}
#| label: load-packages
#| include: false

library(fs)
library(flair)
library(magrittr)
library(dplyr)
```

## Is this a Shiny app? {auto-animate="true"}

[**A Shiny App**](https://posit.cloud/content/8438880)

## Is this a Shiny app??? {auto-animate="true"}

[**A Shiny App**](https://posit.cloud/content/8438880)

[**Another Shiny App**](https://posit.cloud/content/8438826)

## Shiny can be a pain ... {auto-animate="true"}

-   UI / front-end tasks
-   Routine / tedious tasks

## Shiny can be a pain ... {auto-animate="true"}

-   UI / front-end tasks
-   Routine / tedious tasks

If you are a data professional using R, try **GitHub Copilot with Shiny first!**

::: footer
["The State of Developer Ecosystem 2023"](https://www.jetbrains.com/lp/devecosystem-2023/r/)
:::

## Interacting with Copilot

Supported platforms

-   RStudio IDE

-   Positron? use `chattr` package

## The basic workflow {auto-animate="true"}

![](images/fundamental_workflow.svg){width="41"}

## Prompt and response {auto-animate="true"}

![](images/fundamental_workflow_1.svg){width="41"}

## Writing prompts {auto-animate="true"}

::: columns
::: {.column width="40%"}
Effective prompts

-   Single

-   Short

-   Specific
:::

::: {.column width="20%"}
:::

::: {.column width="40%"}
Type of prompts

-   Command

-   Question

-   Lead-in
:::
:::


``` {.r code-line-numbers="2|3|4"}

# Create simple sidebar UI using bslib package. 
# Put a table and a chart in the main panel.
# Change the UI above. Put stock selection menu in the sidebar.
# ...
```

::: footer
["Single, Short, Specific - Prompting GitHub Copilot for Visual Studio"](https://techcommunity.microsoft.com/t5/microsoft-developer-community/single-short-specific-prompting-github-copilot-for-visual-studio/ba-p/4117226)
:::

## Writing prompts {auto-animate="true"}

-   Know the package / function you want to use 

-   If not sure, ask Copilot

``` {.r code-line-numbers="1|2-3|5"}
# Please don't provide code but give answer in English. 
# What packages in R provide functionality for selection inputs? 
# The user need to select one or a few stock tickers. 

# Answer:  
```

## Writing prompts {auto-animate="true"}

-   Know the package / function you want to use 

-   If not sure, ask Copilot

``` {.r code-line-numbers="5"}
# Please don't provide code but give answer in English. 
# What packages in R provide functionality for selection inputs? 
# The user need to select one or a few stock tickers. 

# Answer: The shiny package provides the functionality for selection inputs.
# The selectInput function creates a selection input in Shiny.

```

## Set the context

![](images/fundamental_workflow_2.svg){width="41"}

## Set the context

-   Context **as code**

```{r}
dir_tree("../ui_reproduction")
```

## Set the context

::: columns
::: {.column width="65%"}
![](images/context_files.jpg){width="900"}
:::
::: {.column width="35%"}
*   Current active tab

*   Opened tabs

    + `main.min.js`
    
    + `main.css`

*   Index project files

:::
:::

::: footer
https://learn.microsoft.com/en-us/training/modules/introduction-prompt-engineering-with-github-copilot/2-prompt-engineering-foundations-best-practices
:::

## Set the context

-   Most important context in the current tab

``` {.html code-line-numbers="|8-9|10"}

<!doctype html>
<html lang="en" class="no-js">
...
</html>

<!-- 
# Above is the index.html file. The file is a template for a 
# website's homepage.
# Re-create the homepage, but with R Shiny.
-->
```

## Refer to knowledge on the internet {auto-animate="true"}

``` {.html code-line-numbers="11-12"}

<!doctype html>
<html lang="en" class="no-js">
...
</html>

<!-- 
# Above is the index.html file. 
# The file is a template for a website's homepage.
# Re-create the homepage, but with R Shiny.
# Refer here: https://shiny.posit.co/r/articles/build/html-tags/
# for more information on how to convert HTML to Shiny.
-->
```

## Refer to knowledge on the internet {auto-animate="true"}

``` r

  c(
    "Use the 'Tidy Modeling with R' (https://www.tmwr.org/) book as main reference",
    "Use the 'R for Data Science' (https://r4ds.had.co.nz/) book as main reference",
    "Use tidyverse packages: readr, ggplot2, dplyr, tidyr",
    "For models, use tidymodels packages: recipes, parsnip, yardstick, workflows, broom",
    "Avoid explanations unless requested by user, expecting code only"
  )
```

::: footer
https://github.com/mlverse/chattr/blob/c296963390de1d8727cac72dda301c910c81a624/inst/prompt/script.R#L2
:::

## Give examples

``` {.html code-line-numbers="13-14"}

<!doctype html>
<html lang="en" class="no-js">
...
</html>

<!-- 
# Above is the index.html file. 
# The file is a template for a website's homepage.
# Re-create the homepage, but with R Shiny.
# Refer here: https://shiny.posit.co/r/articles/build/html-tags/
# for more information on how to convert HTML to Shiny.
# For example, the HTML tag <div class="navicon"> 
# should be converted to the shiny tag div(class = 'navicon').
-->
```

## Not all context helps

![](images/no_completions_available.jpg){width="41"}

"No completions available"???

## Not all context helps {auto-animate="true"}

-   Personal information

-   Bias concerns

-   If not sure, ask Copilot!

``` {.r code-line-numbers="1,5"}
# Please don't provide code but give answer in English. 
# Above is the HTML code for a website's homepage. 
# Does it contain any personal or sensitive information?

# Answer: 
```

## Not all context helps {auto-animate="true"}

-   Personal information

-   Bias concerns

-   If not sure, ask Copilot!

``` {.r code-line-numbers="6-10"}
# Please don't provide code but give answer in English. 
# Above is the HTML code for a website's homepage. 
# Does it contain any personal or sensitive information?

# Answer: 
# 1. The name of the person is Mark Wang.
# 2. The person is located in Toronto, ON.
# 3. The person's LinkedIn profile is https://www.linkedin.com/in/kmarkwang.
# 4. The person's email address is not provided.
# 5. The person's image is provided in the HTML code.
```

## Iteration

![](images/fundamental_workflow_3.svg){width="41"}

## Iteration

::: columns
::: {.column width="40%"}
Iteration

-   Documentation first

-   From static to dynamic data

-   Create internal prompt dictionary

:::
::: {.column width="20%"}
:::
::: {.column width="40%"}
Type of tests

-   Unit tests

-   Browser tests

-   Server tests

:::
:::

## Copilot for R Shiny tests {auto-animate="true"}

-   Documentation first

``` {.r code-line-numbers="7"}
create_stock_table <- function(data) {
  stock_data_wide <- data %>% spread(symbol, close) %>%
    mutate(date = as.character(date))
  stock_data_wide
}

# Create documentation for the function create_stock_table above:
```

## Copilot for R Shiny tests {auto-animate="true"}

-   Documentation first

``` {.r}
#' Create a stock table
#' 
#' This function creates a stock table from a data frame.
#' 
#' @param data A data frame with stock data
#' @return A data frame with stock data in wide format
#' 
create_stock_table <- function(data) {
  stock_data_wide <- data %>% spread(symbol, close) %>%
    mutate(date = as.character(date))
  stock_data_wide
}

# Now, write unit tests for the function create_stock_table. 
# Use the testthat package and write the tests. 
# Refererence here: https://testthat.r-lib.org/
```

## Copilot for R Shiny tests {auto-animate="true"}

::: columns
::: {.column width="30%"}

![](images/html_output.jpg)

:::
::: {.column width="20%"}
:::
::: {.column width="50%"}
-   From static to dynamic data

``` r
"<table  class = 'table shiny-table table- spacing-s' style = 'width:auto;'>
   \n
   <thead>
      <tr>
         <th style='text-align: left;'> date </th>
         <th style='text-align: right;'> AAPL </th>
         <th style='text-align: right;'> GOOGL </th>
      </tr>
   </thead>
   <tbody>
      \n  
      <tr>
         <td> 19844.00 </td>
         <td align=\"right\"> 169.30 </td>
         <td align=\"right\"> 163.86 </td>
      </tr>
      \n  
      <tr>
         <td> 19845.00 </td>
         <td align=\"right\"> 173.03 </td>
         <td align=\"right\"> 166.62 </td>
      </tr>
      \n  
      <tr>
         <td> 19846.00 </td>
         <td align=\"right\"> 183.38 </td>
         <td align=\"right\"> 167.24 </td>
      </tr>
      \n  
      <tr>
         <td> 19849.00 </td>
         <td align=\"right\"> 181.71 </td>
         <td align=\"right\"> 168.10 </td>
      </tr>
      \n  
      <tr>
         <td> 19850.00 </td>
         <td align=\"right\"> 182.40 </td>
         <td align=\"right\"> 171.25 </td>
      </tr>
      \n  
      <tr>
         <td> 19851.00 </td>
         <td align=\"right\"> 182.74 </td>
         <td align=\"right\"> 169.38 </td>
      </tr>
      \n  
      <tr>
         <td> 19852.00 </td>
         <td align=\"right\"> 184.57 </td>
         <td align=\"right\"> 169.96 </td>
      </tr>
      \n  
      <tr>
         <td> 19853.00 </td>
         <td align=\"right\"> 183.05 </td>
         <td align=\"right\"> 168.65 </td>
      </tr>
      \n  
      <tr>
         <td> 19856.00 </td>
         <td align=\"right\"> 186.28 </td>
         <td align=\"right\"> 169.14 </td>
      </tr>
      \n  
      <tr>
         <td> 19857.00 </td>
         <td align=\"right\"> 187.43 </td>
         <td align=\"right\"> 170.34 </td>
      </tr>
      \n  
      <tr>
         <td> 19858.00 </td>
         <td align=\"right\"> 189.72 </td>
         <td align=\"right\"> 172.51 </td>
      </tr>
      \n  
      <tr>
         <td> 19859.00 </td>
         <td align=\"right\"> 189.84 </td>
         <td align=\"right\"> 174.18 </td>
      </tr>
      \n  
      <tr>
         <td> 19860.00 </td>
         <td align=\"right\"> 189.87 </td>
         <td align=\"right\"> 176.06 </td>
      </tr>
      \n  
      <tr>
         <td> 19863.00 </td>
         <td align=\"right\"> 191.04 </td>
         <td align=\"right\"> 176.92 </td>
      </tr>
      \n  
      <tr>
         <td> 19864.00 </td>
         <td align=\"right\"> 192.35 </td>
         <td align=\"right\"> 177.85 </td>
      </tr>
      \n  
      <tr>
         <td> 19865.00 </td>
         <td align=\"right\"> 190.90 </td>
         <td align=\"right\"> 176.38 </td>
      </tr>
      \n  
      <tr>
         <td> 19866.00 </td>
         <td align=\"right\"> 186.88 </td>
         <td align=\"right\"> 173.55 </td>
      </tr>
      \n  
      <tr>
         <td> 19867.00 </td>
         <td align=\"right\"> 189.98 </td>
         <td align=\"right\"> 174.99 </td>
      </tr>
      \n  
      <tr>
         <td> 19871.00 </td>
         <td align=\"right\"> 189.99 </td>
         <td align=\"right\"> 176.40 </td>
      </tr>
      \n  
      <tr>
         <td> 19872.00 </td>
         <td align=\"right\"> 190.29 </td>
         <td align=\"right\"> 175.90 </td>
      </tr>
      \n  
      <tr>
         <td> 19873.00 </td>
         <td align=\"right\"> 191.29 </td>
         <td align=\"right\"> 172.11 </td>
      </tr>
      \n  
      <tr>
         <td> 19874.00 </td>
         <td align=\"right\"> 192.25 </td>
         <td align=\"right\"> 172.50 </td>
      </tr>
      \n  
      <tr>
         <td> 19877.00 </td>
         <td align=\"right\"> 194.03 </td>
         <td align=\"right\"> 173.17 </td>
      </tr>
      \n  
      <tr>
         <td> 19878.00 </td>
         <td align=\"right\"> 194.35 </td>
         <td align=\"right\"> 173.79 </td>
      </tr>
      \n  
      <tr>
         <td> 19879.00 </td>
         <td align=\"right\"> 195.87 </td>
         <td align=\"right\"> 175.41 </td>
      </tr>
      \n  
      <tr>
         <td> 19880.00 </td>
         <td align=\"right\"> 194.48 </td>
         <td align=\"right\"> 176.73 </td>
      </tr>
      \n  
      <tr>
         <td> 19881.00 </td>
         <td align=\"right\"> 196.89 </td>
         <td align=\"right\"> 174.46 </td>
      </tr>
      \n  
      <tr>
         <td> 19884.00 </td>
         <td align=\"right\"> 193.12 </td>
         <td align=\"right\"> 175.01 </td>
      </tr>
      \n  
      <tr>
         <td> 19885.00 </td>
         <td align=\"right\"> 207.15 </td>
         <td align=\"right\"> 176.62 </td>
      </tr>
      \n  
      <tr>
         <td> 19886.00 </td>
         <td align=\"right\"> 213.07 </td>
         <td align=\"right\"> 177.79 </td>
      </tr>
      \n  
      <tr>
         <td> 19887.00 </td>
         <td align=\"right\"> 214.24 </td>
         <td align=\"right\"> 175.16 </td>
      </tr>
      \n  
      <tr>
         <td> 19888.00 </td>
         <td align=\"right\"> 212.49 </td>
         <td align=\"right\"> 176.79 </td>
      </tr>
      \n  
      <tr>
         <td> 19891.00 </td>
         <td align=\"right\"> 216.67 </td>
         <td align=\"right\"> 177.24 </td>
      </tr>
      \n  
      <tr>
         <td> 19892.00 </td>
         <td align=\"right\"> 214.29 </td>
         <td align=\"right\"> 175.09 </td>
      </tr>
      \n  
      <tr>
         <td> 19894.00 </td>
         <td align=\"right\"> 209.68 </td>
         <td align=\"right\"> 176.30 </td>
      </tr>
      \n  
      <tr>
         <td> 19895.00 </td>
         <td align=\"right\"> 207.49 </td>
         <td align=\"right\"> 179.63 </td>
      </tr>
      \n  
      <tr>
         <td> 19898.00 </td>
         <td align=\"right\"> 208.14 </td>
         <td align=\"right\"> 179.22 </td>
      </tr>
      \n  
      <tr>
         <td> 19899.00 </td>
         <td align=\"right\"> 209.07 </td>
         <td align=\"right\"> 184.03 </td>
      </tr>
      \n  
      <tr>
         <td> 19900.00 </td>
         <td align=\"right\"> 213.25 </td>
         <td align=\"right\"> 183.88 </td>
      </tr>
      \n  
      <tr>
         <td> 19901.00 </td>
         <td align=\"right\"> 214.10 </td>
         <td align=\"right\"> 185.41 </td>
      </tr>
      \n  
      <tr>
         <td> 19902.00 </td>
         <td align=\"right\"> 210.62 </td>
         <td align=\"right\"> 182.15 </td>
      </tr>
      \n  
      <tr>
         <td> 19905.00 </td>
         <td align=\"right\"> 216.75 </td>
         <td align=\"right\"> 182.99 </td>
      </tr>
      \n  
      <tr>
         <td> 19906.00 </td>
         <td align=\"right\"> 220.27 </td>
         <td align=\"right\"> 185.24 </td>
      </tr>
      \n  
      <tr>
         <td> 19907.00 </td>
         <td align=\"right\"> 221.55 </td>
         <td align=\"right\"> 185.82 </td>
      </tr>
      \n  
      <tr>
         <td> 19909.00 </td>
         <td align=\"right\"> 226.34 </td>
         <td align=\"right\"> 190.60 </td>
      </tr>
      \n  
      <tr>
         <td> 19912.00 </td>
         <td align=\"right\"> 227.82 </td>
         <td align=\"right\"> 189.03 </td>
      </tr>
      \n  
      <tr>
         <td> 19913.00 </td>
         <td align=\"right\"> 228.68 </td>
         <td align=\"right\"> 188.98 </td>
      </tr>
      \n  
      <tr>
         <td> 19914.00 </td>
         <td align=\"right\"> 232.98 </td>
         <td align=\"right\"> 191.18 </td>
      </tr>
      \n  
      <tr>
         <td> 19915.00 </td>
         <td align=\"right\"> 227.57 </td>
         <td align=\"right\"> 185.57 </td>
      </tr>
      \n  
      <tr>
         <td> 19916.00 </td>
         <td align=\"right\"> 230.54 </td>
         <td align=\"right\"> 185.07 </td>
      </tr>
      \n   
   </tbody>
</table>"
```

:::
:::

## Copilot for R Shiny tests {auto-animate="true"}

-   From static to dynamic data

``` r
"<table  class = 'table shiny-table table- spacing-s' style = 'width:auto;'>\n<thead> <tr> <th style='text-align: left;'> date </th> <th style='text-align: right;'> AAPL </th> <th style='text-align: right;'> GOOGL </th>  </tr> </thead> <tbody>\n  <tr> <td> 19844.00 </td> <td align=\"right\"> 169.30 </td> <td align=\"right\"> 163.86 </td> </tr>\n  <tr> <td> 19845.00 </td> <td align=\"right\"> 173.03 </td> <td align=\"right\"> 166.62 </td> </tr>\n  <tr> <td> 19846.00 </td> <td align=\"right\"> 183.38 </td> <td align=\"right\"> 167.24 </td> </tr>\n  <tr> <td> 19849.00 </td> <td align=\"right\"> 181.71 </td> <td align=\"right\"> 168.10 </td> </tr>\n  <tr> <td> 19850.00 </td> <td align=\"right\"> 182.40 </td> <td align=\"right\"> 171.25 </td> </tr>\n  <tr> <td> 19851.00 </td> <td align=\"right\"> 182.74 </td> <td align=\"right\"> 169.38 </td> </tr>\n  <tr> <td> 19852.00 </td> <td align=\"right\"> 184.57 </td> <td align=\"right\"> 169.96 </td> </tr>\n  <tr> <td> 19853.00 </td> <td align=\"right\"> 183.05 </td> <td align=\"right\"> 168.65 </td> </tr>\n  <tr> <td> 19856.00 </td> <td align=\"right\"> 186.28 </td> <td align=\"right\"> 169.14 </td> </tr>\n  <tr> <td> 19857.00 </td> <td align=\"right\"> 187.43 </td> <td align=\"right\"> 170.34 </td> </tr>\n  <tr> <td> 19858.00 </td> <td align=\"right\"> 189.72 </td> <td align=\"right\"> 172.51 </td> </tr>\n  <tr> <td> 19859.00 </td> <td align=\"right\"> 189.84 </td> <td align=\"right\"> 174.18 </td> </tr>\n  <tr> <td> 19860.00 </td> <td align=\"right\"> 189.87 </td> <td align=\"right\"> 176.06 </td> </tr>\n  <tr> <td> 19863.00 </td> <td align=\"right\"> 191.04 </td> <td align=\"right\"> 176.92 </td> </tr>\n  <tr> <td> 19864.00 </td> <td align=\"right\"> 192.35 </td> <td align=\"right\"> 177.85 </td> </tr>\n  <tr> <td> 19865.00 </td> <td align=\"right\"> 190.90 </td> <td align=\"right\"> 176.38 </td> </tr>\n  <tr> <td> 19866.00 </td> <td align=\"right\"> 186.88 </td> <td align=\"right\"> 173.55 </td> </tr>\n  <tr> <td> 19867.00 </td> <td align=\"right\"> 189.98 </td> <td align=\"right\"> 174.99 </td> </tr>\n  <tr> <td> 19871.00 </td> <td align=\"right\"> 189.99 </td> <td align=\"right\"> 176.40 </td> </tr>\n  <tr> <td> 19872.00 </td> <td align=\"right\"> 190.29 </td> <td align=\"right\"> 175.90 </td> </tr>\n  <tr> <td> 19873.00 </td> <td align=\"right\"> 191.29 </td> <td align=\"right\"> 172.11 </td> </tr>\n  <tr> <td> 19874.00 </td> <td align=\"right\"> 192.25 </td> <td align=\"right\"> 172.50 </td> </tr>\n  <tr> <td> 19877.00 </td> <td align=\"right\"> 194.03 </td> <td align=\"right\"> 173.17 </td> </tr>\n  <tr> <td> 19878.00 </td> <td align=\"right\"> 194.35 </td> <td align=\"right\"> 173.79 </td> </tr>\n  <tr> <td> 19879.00 </td> <td align=\"right\"> 195.87 </td> <td align=\"right\"> 175.41 </td> </tr>\n  <tr> <td> 19880.00 </td> <td align=\"right\"> 194.48 </td> <td align=\"right\"> 176.73 </td> </tr>\n  <tr> <td> 19881.00 </td> <td align=\"right\"> 196.89 </td> <td align=\"right\"> 174.46 </td> </tr>\n  <tr> <td> 19884.00 </td> <td align=\"right\"> 193.12 </td> <td align=\"right\"> 175.01 </td> </tr>\n  <tr> <td> 19885.00 </td> <td align=\"right\"> 207.15 </td> <td align=\"right\"> 176.62 </td> </tr>\n  <tr> <td> 19886.00 </td> <td align=\"right\"> 213.07 </td> <td align=\"right\"> 177.79 </td> </tr>\n  <tr> <td> 19887.00 </td> <td align=\"right\"> 214.24 </td> <td align=\"right\"> 175.16 </td> </tr>\n  <tr> <td> 19888.00 </td> <td align=\"right\"> 212.49 </td> <td align=\"right\"> 176.79 </td> </tr>\n  <tr> <td> 19891.00 </td> <td align=\"right\"> 216.67 </td> <td align=\"right\"> 177.24 </td> </tr>\n  <tr> <td> 19892.00 </td> <td align=\"right\"> 214.29 </td> <td align=\"right\"> 175.09 </td> </tr>\n  <tr> <td> 19894.00 </td> <td align=\"right\"> 209.68 </td> <td align=\"right\"> 176.30 </td> </tr>\n  <tr> <td> 19895.00 </td> <td align=\"right\"> 207.49 </td> <td align=\"right\"> 179.63 </td> </tr>\n  <tr> <td> 19898.00 </td> <td align=\"right\"> 208.14 </td> <td align=\"right\"> 179.22 </td> </tr>\n  <tr> <td> 19899.00 </td> <td align=\"right\"> 209.07 </td> <td align=\"right\"> 184.03 </td> </tr>\n  <tr> <td> 19900.00 </td> <td align=\"right\"> 213.25 </td> <td align=\"right\"> 183.88 </td> </tr>\n  <tr> <td> 19901.00 </td> <td align=\"right\"> 214.10 </td> <td align=\"right\"> 185.41 </td> </tr>\n  <tr> <td> 19902.00 </td> <td align=\"right\"> 210.62 </td> <td align=\"right\"> 182.15 </td> </tr>\n  <tr> <td> 19905.00 </td> <td align=\"right\"> 216.75 </td> <td align=\"right\"> 182.99 </td> </tr>\n  <tr> <td> 19906.00 </td> <td align=\"right\"> 220.27 </td> <td align=\"right\"> 185.24 </td> </tr>\n  <tr> <td> 19907.00 </td> <td align=\"right\"> 221.55 </td> <td align=\"right\"> 185.82 </td> </tr>\n  <tr> <td> 19909.00 </td> <td align=\"right\"> 226.34 </td> <td align=\"right\"> 190.60 </td> </tr>\n  <tr> <td> 19912.00 </td> <td align=\"right\"> 227.82 </td> <td align=\"right\"> 189.03 </td> </tr>\n  <tr> <td> 19913.00 </td> <td align=\"right\"> 228.68 </td> <td align=\"right\"> 188.98 </td> </tr>\n  <tr> <td> 19914.00 </td> <td align=\"right\"> 232.98 </td> <td align=\"right\"> 191.18 </td> </tr>\n  <tr> <td> 19915.00 </td> <td align=\"right\"> 227.57 </td> <td align=\"right\"> 185.57 </td> </tr>\n  <tr> <td> 19916.00 </td> <td align=\"right\"> 230.54 </td> <td align=\"right\"> 185.07 </td> </tr>\n   </tbody> </table>"
# Above is the expected HTML for the stock_table table. 
# However, the actual data and date of stock prices will change. 
# We need to create a function to transform the HTML into a format that can be compared.
# The function below will remove the date and close price values from the HTML.
# This will allow us to compare the HTML without worrying about the actual values.

transform_html <- function(html) {
 # Remove the date values
 html <- gsub("<td> [0-9]+\\.[0-9]+ </td>", "<td> DATE </td>", html)
 # Remove the close price values
 html <- gsub("<td align=\"right\"> [0-9]+\\.[0-9]+ </td>", "<td align=\"right\"> CLOSE </td>", html)
 return(html)
}
 
  transformed_html <- transform_html(stock_table)
  
 })
```
## Copilot for R Shiny tests {auto-animate="true"}

-  Create internal prompt dictionary
  *  Iteration 1: 

``` {.r}
ui <- ...

server <- function(...){...}

# Above is the UI and server code of calendar module. 
# Create code that does some basic server test.

```

## Copilot for R Shiny tests {auto-animate="true"}

-  Create internal prompt dictionary
  *  Iteration 1:  tell Copilot to create server tests

``` {.r}
ui <- ...

server <- function(...){...}

# Above is the UI and server code of the stock price app. 
# Create code that does some basic server test.

# Load the Shiny library
library(shiny)

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

## Copilot for R Shiny tests {auto-animate="true"}

-  Create internal prompt dictionary
  *  Iteration 2: Refer to resources on the internet

``` {.r}
ui <- ...

server <- function(...){...}

# Above is the UI and server of the stock price app. 
# Create code that does some basic server test.
# Refer to the documentation here: https://shiny.posit.co/r/articles/improve/server-function-testing/
# Refer to the explanation here: https://mastering-shiny.org/scaling-testing.html#modules, for the correct structure of serve tests. 

# Define the test
test_that("server function works correctly", {
  # Create a mock input object
  input <- list(stock = "AAPL")
  
  # Create a mock output object
  output <- list(stock_table = NULL, stock_plot = NULL)
  
  # Run the server function
  server(input, output)
  
  # Check that the stock data is a data frame
  expect_is(output$stock_data, "data.frame")
  
  # ...
})
```

## Copilot for R Shiny tests {auto-animate="true"}

-  Create internal prompt dictionary
  *  Iteration 3: Provide examples
  
``` {.r}
ui <- ...

server <- function(...){...}

# Above is the UI and server code of calendar module. 
# Create code that does some basic server test.
# Refer to the documentation here: https://shiny.posit.co/r/articles/improve/server-function-testing/
# Refer to the explanation here: https://mastering-shiny.org/scaling-testing.html#modules, for the correct structure of serve tests. 
#
# Example: 
# summaryUI <- function(id) {
#   tagList(
#     outputText(ns(id, "min")),
#     outputText(ns(id, "mean")),
#     outputText(ns(id, "max")),
#   )
# }
# summaryServer <- function(id, var) {
#   stopifnot(is.reactive(var))
#   
#   moduleServer(id, function(input, output, session) {
#     range_val <- reactive(range(var(), na.rm = TRUE))
#     output$min <- renderText(range_val()[[1]])
#     output$max <- renderText(range_val()[[2]])
#     output$mean <- renderText(mean(var()))
#   })
# }
# Above is summaryUI and summarServer. Below is an simple example of server test:

# test_that("output updates when reactive input changes", {
#   x <- reactiveVal()
#   testServer(summaryServer, args = list(var = x), {
#     x(1:10)
#     session$flushReact()
#     expect_equal(range_val(), c(1, 10))
#     expect_equal(output$mean, "5.5")
#     
#     x(10:20)
#     session$flushReact()
#     expect_equal(range_val(), c(10, 20))
#     expect_equal(output$min, "10")
#   }) 
# })

# Create server tests for the stock app server

test_that("stock data is retrieved correctly", {
  testServer(server, {
    expect_is(stock_data(), "data.frame")
    expect_equal(nrow(stock_data()), 10)
    expect_equal(ncol(stock_data()), 3)
    expect_equal(colnames(stock_data()), c("date", "close", "symbol"))
  })
})
```

## Knowledge as prompt dictionary

-   Security and compliance conventions
-   Code and documentation standards
-   Deployment process and environment

